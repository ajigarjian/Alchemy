# Generated by Django 4.2 on 2023-05-08 23:38

import AlchemyApp.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('AlchemyApp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InformationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info_category', models.CharField(max_length=255)),
                ('category_description', models.TextField()),
            ],
            options={
                'verbose_name': 'Information Category',
                'verbose_name_plural': 'Information Categories',
            },
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='nistcontrol',
            name='control_family_abbv',
        ),
        migrations.AddField(
            model_name='client',
            name='address1',
            field=models.CharField(blank=True, max_length=1024, null=True, validators=[AlchemyApp.models.Client.validate_street_address], verbose_name='Address line 1'),
        ),
        migrations.AddField(
            model_name='client',
            name='address2',
            field=models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 2'),
        ),
        migrations.AddField(
            model_name='client',
            name='city',
            field=models.CharField(blank=True, max_length=1024, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z\\s]+$', message='Enter a valid city name containing only letters and spaces.')], verbose_name='City'),
        ),
        migrations.AddField(
            model_name='client',
            name='state',
            field=models.CharField(blank=True, choices=[('ID', 'Idaho'), ('AK', 'Alaska'), ('WI', 'Wisconsin'), ('TN', 'Tennessee'), ('VA', 'Virginia'), ('AS', 'American Samoa'), ('LA', 'Louisiana'), ('KS', 'Kansas'), ('MO', 'Missouri'), ('MP', 'Northern Mariana Islands'), ('CO', 'Colorado'), ('DC', 'District of Columbia'), ('WY', 'Wyoming'), ('MT', 'Montana'), ('SD', 'South Dakota'), ('NJ', 'New Jersey'), ('NH', 'New Hampshire'), ('MN', 'Minnesota'), ('IL', 'Illinois'), ('NM', 'New Mexico'), ('FL', 'Florida'), ('VT', 'Vermont'), ('VI', 'U.S. Virgin Islands'), ('GU', 'Guam'), ('AR', 'Arkansas'), ('MA', 'Massachusetts'), ('CT', 'Connecticut'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('PA', 'Pennsylvania'), ('UT', 'Utah'), ('ME', 'Maine'), ('DE', 'Delaware'), ('NY', 'New York'), ('ND', 'North Dakota'), ('AZ', 'Arizona'), ('SC', 'South Carolina'), ('CA', 'California'), ('GA', 'Georgia'), ('MI', 'Michigan'), ('MS', 'Mississippi'), ('NC', 'North Carolina'), ('UM', 'United States Minor Outlying Islands'), ('PR', 'Puerto Rico'), ('IN', 'Indiana'), ('TX', 'Texas'), ('IA', 'Iowa'), ('RI', 'Rhode Island'), ('MD', 'Maryland'), ('OH', 'Ohio'), ('HI', 'Hawaii'), ('OK', 'Oklahoma'), ('AL', 'Alabama'), ('OR', 'Oregon'), ('KY', 'Kentucky'), ('WA', 'Washington'), ('WV', 'West Virginia')], default=None, max_length=2, null=True, verbose_name='State'),
        ),
        migrations.AddField(
            model_name='client',
            name='zip_code',
            field=models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator('^\\d{5}(?:[-\\s]\\d{4})?$', message='Enter a valid U.S. ZIP code.')], verbose_name='ZIP / Postal code'),
        ),
        migrations.AddField(
            model_name='controlfamily',
            name='family_abbreviation',
            field=models.CharField(choices=[('AC', 'AC'), ('AT', 'AT'), ('AU', 'AU'), ('CM', 'CM'), ('CP', 'CP'), ('IA', 'IA'), ('IR', 'IR'), ('MA', 'MA'), ('MP', 'MP'), ('PE', 'PE'), ('PL', 'PL'), ('PS', 'PS'), ('RA', 'RA'), ('CA', 'CA'), ('SC', 'SC'), ('SI', 'SI'), ('SA', 'SA')], default=None, max_length=2),
        ),
        migrations.AddField(
            model_name='nistcontrol',
            name='supplemental_guidance',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='question',
            name='question_type',
            field=models.CharField(blank=True, choices=[('Control Question', 'Control Question'), ('Overview Question', 'Overview Question'), ('Data Type Question', 'Data Type Question'), ('Impact Question', 'Impact Question')], max_length=40),
        ),
        migrations.AlterField(
            model_name='client',
            name='client_name',
            field=models.CharField(max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(1)]),
        ),
        migrations.AlterField(
            model_name='controlfamily',
            name='family_description',
            field=models.CharField(blank='True', max_length=255, null='True'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_groups', related_query_name='customuser', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_staff',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_superuser',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_user_permissions', related_query_name='customuser', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='nistcontrol',
            name='control_family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AlchemyApp.controlfamily'),
        ),
        migrations.AlterField(
            model_name='question',
            name='controls',
            field=models.ManyToManyField(blank=True, to='AlchemyApp.nistcontrol'),
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('abbreviation', models.CharField(blank=True, max_length=20, null=True)),
                ('environment', models.CharField(blank=True, choices=[('on_premises', 'On-Premises'), ('cloud_based', 'Cloud-Based'), ('hybrid', 'Hybrid')], max_length=20, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('authorization_boundary', models.TextField(blank=True, null=True)),
                ('operational_status', models.CharField(blank=True, choices=[('under_development', 'Under Development'), ('operational', 'Operational'), ('decommissioned', 'Decommissioned')], max_length=20, null=True)),
                ('last_authorization_date', models.DateField(blank=True, null=True)),
                ('fedramp_compliance_status', models.CharField(blank=True, choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('authorized', 'Authorized')], default='not_started', max_length=20, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_title', models.CharField(blank=True, max_length=255, null=True)),
                ('owner_email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('owner_phone_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('color', models.CharField(max_length=20)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AlchemyApp.client')),
            ],
            options={
                'unique_together': {('name', 'client')},
            },
        ),
        migrations.CreateModel(
            name='InformationSubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info_subcategory', models.CharField(max_length=255)),
                ('subcategory_description', models.TextField()),
                ('parent_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AlchemyApp.informationcategory')),
            ],
            options={
                'verbose_name': 'Information Subcategory',
                'verbose_name_plural': 'Information SubCategories',
            },
        ),
        migrations.RemoveField(
            model_name='answer',
            name='client',
        ),
        migrations.AddField(
            model_name='answer',
            name='system',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='AlchemyApp.system'),
        ),
    ]
