# Generated by Django 4.2 on 2023-04-19 00:37

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ControlFamily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_name', models.CharField(choices=[('Access Control', 'Access Control'), ('Awareness and Training', 'Awareness and Training'), ('Audit and Accountability', 'Audit and Accountability'), ('Configuration Management', 'Configuration Management'), ('Contingency Planning', 'Contingency Planning'), ('Identification and Authentication', 'Identification and Authentication'), ('Incident Response', 'Incident Response'), ('Maintenance', 'Maintenance'), ('Media Protection', 'Media Protection'), ('Physical and Environmental Protection', 'Physical and Environmental Protection'), ('Planning', 'Planning'), ('Personnel Security', 'Personnel Security'), ('Risk Assessment', 'Risk Assessment'), ('Security Assessment and Authorization', 'Security Assessment and Authorization'), ('System and Communications Protection', 'System and Communications Protection'), ('System and Information Integrity', 'System and Information Integrity'), ('System and Services Acquisition', 'System and Services Acquisition')], default=None, max_length=40)),
                ('family_description', models.CharField(default=None, max_length=255)),
            ],
            options={
                'verbose_name': 'Control Family',
                'verbose_name_plural': 'Control Families',
            },
        ),
        migrations.CreateModel(
            name='NISTControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_name', models.CharField(max_length=255)),
                ('control_family', models.CharField(max_length=30)),
                ('control_family_abbv', models.CharField(max_length=2)),
                ('control_number', models.IntegerField()),
                ('control_enhancement', models.IntegerField(blank=True, null=True)),
                ('control_description', models.TextField()),
            ],
            options={
                'verbose_name': 'NIST Control',
                'verbose_name_plural': 'NIST Controls',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('controls', models.ManyToManyField(to='AlchemyApp.nistcontrol')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AlchemyApp.client')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AlchemyApp.client')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AlchemyApp.question')),
            ],
            options={
                'unique_together': {('client', 'question')},
            },
        ),
    ]
